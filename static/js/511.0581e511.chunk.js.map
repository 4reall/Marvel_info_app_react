{"version":3,"file":"static/js/511.0581e511.chunk.js","mappings":"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","sources":["components/errorBoundary/errorBoundary.js","components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charList/List.js","components/charList/CharList.js","components/searchForm/SearchForm.js","pages/MainPage.js","services/marvelServices.js","hooks/useHttp.js"],"sourcesContent":["import { Component } from 'react';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nclass ErrorBoundary extends Component {\n\tstate = {\n\t\terror: false,\n\t};\n\n\tcomponentDidCatch(error, errorMessage) {\n\t\tconsole.log(error, errorMessage);\n\t\tthis.setState({ error: true });\n\t}\n\n\trender() {\n\t\tif (this.state.error) {\n\t\t\treturn <ErrorMessage />;\n\t\t}\n\t\treturn this.props.children;\n\t}\n}\n\nexport default ErrorBoundary;\n","import error from './error.gif';\n\nconst ErrorMessage = () => {\n\treturn (\n\t\t<img\n\t\t\tstyle={{\n\t\t\t\tdisplay: 'block',\n\t\t\t\tmargin: '0 auto',\n\t\t\t\twidth: '260px',\n\t\t\t\theight: '250px',\n\t\t\t\tobjectFit: 'contain',\n\t\t\t\t// gridColumn: '2/3',\n\t\t\t}}\n\t\t\tsrc={error}\n\t\t\talt=\"error\"\n\t\t/>\n\t);\n};\n\nexport default ErrorMessage;\n","import { useState, useEffect } from 'react';\nimport { useMarvelServices } from '../../services/marvelServices';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\tconst [char, setChar] = useState({});\n\tconst { loading, error, getCharacter, clearError } = useMarvelServices();\n\n\tuseEffect(() => {\n\t\tupdateChar();\n\t\t// const intervalId = setInterval(updateChar, 5000);\n\t\t// return () => {\n\t\t// \tclearInterval(intervalId);\n\t\t// };\n\t}, []);\n\n\tconst onCharLoaded = (char) => {\n\t\tsetChar(char);\n\t};\n\n\tconst updateChar = () => {\n\t\tclearError();\n\t\tconst id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\t\tgetCharacter(id).then(onCharLoaded);\n\t};\n\n\tconst handleClick = () => {\n\t\tupdateChar();\n\t};\n\n\tconst errorMessage = error ? <ErrorMessage /> : null;\n\tconst spinner = loading ? <Spinner /> : null;\n\tconst content = !(spinner || errorMessage) ? <RandomCharBlock char={char} /> : null;\n\n\treturn (\n\t\t<div className=\"randomchar\">\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{content}\n\t\t\t<div className=\"randomchar__static\">\n\t\t\t\t<p className=\"randomchar__title\">\n\t\t\t\t\tRandom character for today!\n\t\t\t\t\t<br />\n\t\t\t\t\tDo you want to get to know him better?\n\t\t\t\t</p>\n\t\t\t\t<p className=\"randomchar__title\">Or choose another one</p>\n\t\t\t\t<button onClick={() => handleClick()} className=\"button button__main\">\n\t\t\t\t\t<div className=\"inner\">try it</div>\n\t\t\t\t</button>\n\t\t\t\t<img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nconst RandomCharBlock = ({ char }) => {\n\tconst { thumbnail, name, description, homepage, wiki } = char;\n\tconst imgSytle =\n\t\tthumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n\t\t\t? { objectFit: 'contain' }\n\t\t\t: { objectFit: 'cover' };\n\treturn (\n\t\t<div className=\"randomchar__block\">\n\t\t\t<img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgSytle} />\n\t\t\t<div className=\"randomchar__info\">\n\t\t\t\t<p className=\"randomchar__name\">{name}</p>\n\t\t\t\t<p className=\"randomchar__descr\">{description}</p>\n\t\t\t\t<div className=\"randomchar__btns\">\n\t\t\t\t\t<a href={homepage} className=\"button button__main\">\n\t\t\t\t\t\t<div className=\"inner\">homepage</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\n\t\t\t\t\t\t<div className=\"inner\">Wiki</div>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default RandomChar;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Skeleton from '../skeleton/Skeleton';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport { useMarvelServices } from '../../services/marvelServices';\n\nimport './charInfo.scss';\nimport { Link } from 'react-router-dom';\n\nconst CharInfo = ({ charId }) => {\n\tconst [char, setChar] = useState(null);\n\n\tconst { loading, error, getCharacter, clearError } = useMarvelServices();\n\n\tuseEffect(() => {\n\t\tupdateChar();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tupdateChar();\n\t}, [charId]);\n\n\tconst onCharLoaded = (char) => {\n\t\tsetChar(char);\n\t};\n\n\tconst updateChar = () => {\n\t\tif (!charId) {\n\t\t\treturn;\n\t\t}\n\t\tclearError();\n\t\tgetCharacter(charId).then(onCharLoaded);\n\t};\n\n\tconst skeleton = !(char || error || loading) ? <Skeleton /> : null;\n\tconst errorMessage = error ? <ErrorMessage /> : null;\n\tconst spinner = loading ? <Spinner /> : null;\n\tconst content = !(spinner || errorMessage || !char) ? <View char={char} /> : null;\n\treturn (\n\t\t<div className=\"char__info\">\n\t\t\t{skeleton}\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{content}\n\t\t</div>\n\t);\n};\n\nconst View = ({ char }) => {\n\tconst { thumbnail, name, description, homepage, wiki, comicsItems } = char;\n\tconst imgNotAvailabe = thumbnail.match('image_not_available.jpg') ? { objectFit: 'contain' } : null;\n\treturn (\n\t\t<>\n\t\t\t<div className=\"char__basics\">\n\t\t\t\t<img src={thumbnail} alt=\"abyss\" style={imgNotAvailabe} />\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"char__info-name\">{name}</div>\n\t\t\t\t\t<div className=\"char__btns\">\n\t\t\t\t\t\t<a href={homepage} className=\"button button__main\">\n\t\t\t\t\t\t\t<div className=\"inner\">Homepage</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\n\t\t\t\t\t\t\t<div className=\"inner\">wiki</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"char__descr\">{description}</div>\n\t\t\t<div className=\"char__comics\">Comics:</div>\n\t\t\t<ul className=\"char__comics-list\">\n\t\t\t\t{comicsItems.map((item, i) => {\n\t\t\t\t\tconst comicId = item.resourceURI ? item.resourceURI.match(/\\d{3,}/) : null;\n\t\t\t\t\tconst disabled = !comicId ? { pointerEvents: 'none' } : null;\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<li style={disabled} key={i} className=\"char__comics-item\">\n\t\t\t\t\t\t\t<Link to={`comics/${comicId}`}>{item.name}</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</ul>\n\t\t</>\n\t);\n};\n\nCharInfo.propTypes = {\n\tcharId: PropTypes.number,\n};\nView.propTypes = {\n\tchar: PropTypes.object.isRequired,\n};\n\nexport default CharInfo;\n","import { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport { useRef } from 'react';\n\nconst List = ({ arr, onCharSelected }) => {\n\tconst focusRefs = useRef([]);\n\n\tconst onItemFocus = (arr, i) => {\n\t\tarr.forEach((item) => item.classList.remove('char__item_selected'));\n\t\tarr[i].classList.add('char__item_selected');\n\t\tarr[i].focus();\n\t};\n\tconst items = arr.map((item, i) => {\n\t\tconst imgNotAvailabe = item.thumbnail.match('image_not_available.jpg')\n\t\t\t? { objectFit: 'contain' }\n\t\t\t: null;\n\t\treturn (\n\t\t\t<CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n\t\t\t\t<li\n\t\t\t\t\tclassName=\"char__item\"\n\t\t\t\t\ttabIndex={0}\n\t\t\t\t\tref={(e) => (focusRefs.current[i] = e)}\n\t\t\t\t\tkey={item.id}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tonCharSelected(item.id);\n\t\t\t\t\t\tonItemFocus(focusRefs.current, i);\n\t\t\t\t\t}}\n\t\t\t\t\tonKeyDown={(e) => {\n\t\t\t\t\t\tif (e.key === ' ' || e.key === 'Enter') {\n\t\t\t\t\t\t\tonCharSelected(item.id);\n\t\t\t\t\t\t\tonItemFocus(focusRefs.current, i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc={item.thumbnail}\n\t\t\t\t\t\talt=\"Character's name\"\n\t\t\t\t\t\tstyle={imgNotAvailabe}\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"char__name\">{item.name}</div>\n\t\t\t\t</li>\n\t\t\t</CSSTransition>\n\t\t);\n\t});\n\treturn (\n\t\t<ul className=\"char__grid\">\n\t\t\t<TransitionGroup component={null}>{items}</TransitionGroup>\n\t\t</ul>\n\t);\n};\n\nexport default List;\n","import React, { useState, useEffect } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport List from './List';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\nimport { useMarvelServices } from '../../services/marvelServices';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\tconst [charList, setCharList] = useState([]);\n\tconst [newItemLoading, setNewItemLoading] = useState(false);\n\tconst [offset, setOffset] = useState(210);\n\tconst [charsEnded, setCharsEnded] = useState(false);\n\n\tconst { loading, error, getAllCharacters, clearError } =\n\t\tuseMarvelServices();\n\n\tuseEffect(() => {\n\t\tonRequest(offset, true);\n\t}, []);\n\n\tconst onRequest = (offset, initial) => {\n\t\tinitial ? setNewItemLoading(false) : setNewItemLoading(true);\n\t\tgetAllCharacters(offset).then((res) => onCharListLoaded(res));\n\t};\n\n\tconst onCharListLoaded = (newCharList) => {\n\t\tclearError();\n\t\tconst ended = newCharList.length < 9;\n\n\t\tsetCharList((charList) => [...charList, ...newCharList]);\n\t\tsetNewItemLoading(false);\n\t\tsetOffset((offset) => offset + 9);\n\t\tsetCharsEnded(ended);\n\t};\n\n\tconst errorMessage = error && !newItemLoading ? <ErrorMessage /> : null;\n\tconst spinner = loading && !newItemLoading ? <Spinner /> : null;\n\t// const content = !(spinner || errorMessage) ? (\n\t// \t<List arr={charList} onCharSelected={props.onCharSelected} />\n\t// ) : null;\n\n\treturn (\n\t\t<div className=\"char__list\">\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t<List arr={charList} onCharSelected={props.onCharSelected} />\n\t\t\t{/*{content}*/}\n\t\t\t<div className=\"char__buttons\">\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tonRequest(offset);\n\t\t\t\t\t}}\n\t\t\t\t\tdisabled={error ? true : newItemLoading}\n\t\t\t\t\tstyle={{ display: `${charsEnded ? 'none' : 'block'}` }}\n\t\t\t\t\tclassName=\"button button__main button__long\"\n\t\t\t\t>\n\t\t\t\t\t<div className=\"inner\">Next page</div>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nCharList.propTypes = {\n\tonCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import {\n\tFormik,\n\tField,\n\tForm,\n\tErrorMessage as FormikErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\n\nimport './searchForm.scss';\nimport { useMarvelServices } from '../../services/marvelServices';\nimport { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nconst SearchForm = () => {\n\tconst [char, setChar] = useState(null);\n\tconst { error, getCharacterByName, loading, clearError } =\n\t\tuseMarvelServices();\n\tconst updateChar = (name) => {\n\t\tclearError();\n\n\t\tgetCharacterByName(name).then((res) => setChar(res));\n\t};\n\n\tconst errorMessage = error ? (\n\t\t<div className=\"char__search-critical-error\">\n\t\t\t<ErrorMessage />\n\t\t</div>\n\t) : null;\n\tconst results = !char ? null : char.length > 0 ? (\n\t\t<div className={'char__search-wrapper'}>\n\t\t\t<div className=\"char__search-succeed\">\n\t\t\t\tThere is! {char[0].name} has been found\n\t\t\t</div>\n\t\t\t<Link\n\t\t\t\tto={`/Marvel_react_app/character/${char[0].id}`}\n\t\t\t\tclassName={'button  button__main'}\n\t\t\t>\n\t\t\t\t<div className=\"inner\">TO PAGE</div>\n\t\t\t</Link>\n\t\t</div>\n\t) : (\n\t\t<div className=\"char__search-error\">\n\t\t\tThe character was not found. Check the name and try again\n\t\t</div>\n\t);\n\treturn (\n\t\t<div className=\"char__search-form\">\n\t\t\t<Formik\n\t\t\t\tinitialValues={{ charName: '' }}\n\t\t\t\tvalidationSchema={Yup.object({\n\t\t\t\t\tcharName: Yup.string().required('This is required field'),\n\t\t\t\t})}\n\t\t\t\tonSubmit={(values) => {\n\t\t\t\t\tupdateChar(values.charName);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Form>\n\t\t\t\t\t<label className=\"char__search-label\" htmlFor={'charName'}>\n\t\t\t\t\t\tOr find a character by name:\n\t\t\t\t\t</label>\n\t\t\t\t\t<div className=\"char__search-wrapper\">\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tid=\"charName\"\n\t\t\t\t\t\t\tname=\"charName\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"Enter name\"\n\t\t\t\t\t\t\tclassName=\"char__search-input\"\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\tclassName=\"modal__btn button button__main\"\n\t\t\t\t\t\t\tdisabled={loading}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"inner\">FIND</div>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<FormikErrorMessage\n\t\t\t\t\t\tclassName={'char__search-error'}\n\t\t\t\t\t\tcomponent={'div'}\n\t\t\t\t\t\tname=\"charName\"\n\t\t\t\t\t/>\n\t\t\t\t</Form>\n\t\t\t</Formik>\n\t\t\t{results}\n\t\t\t{errorMessage}\n\t\t</div>\n\t);\n};\nexport default SearchForm;\n","import { useState } from 'react';\n\nimport ErrorBoundary from '../components/errorBoundary/errorBoundary';\nimport RandomChar from '../components/randomChar/RandomChar';\nimport CharInfo from '../components/charInfo/CharInfo';\nimport CharList from '../components/charList/CharList';\nimport SearchForm from '../components/searchForm/SearchForm';\n\nimport decoration from '../resources/img/vision.png';\n\nconst MainPage = () => {\n\tconst [selectedChar, setSelectedChar] = useState(null);\n\n\tconst onCharSelected = (id) => {\n\t\tsetSelectedChar(id);\n\t};\n\treturn (\n\t\t<>\n\t\t\t<ErrorBoundary>\n\t\t\t\t<RandomChar />\n\t\t\t</ErrorBoundary>\n\t\t\t<div className=\"char__content\">\n\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t<CharList onCharSelected={onCharSelected} />\n\t\t\t\t</ErrorBoundary>\n\t\t\t\t<div>\n\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t<CharInfo charId={selectedChar} />\n\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t<SearchForm />\n\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n\t\t</>\n\t);\n};\n\nexport default MainPage;\n","import { useHttp } from '../hooks/useHttp';\n\nexport const useMarvelServices = () => {\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n\tconst _apiKey = 'apikey=804561fe0b4553a3fa7b8ec7fb139828';\n\tconst _baseCharOffset = 210;\n\n\tconst { error, loading, request, clearError } = useHttp();\n\n\tconst getAllCharacters = async (offset = _baseCharOffset) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\tconst getCharacter = async (id) => {\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n\t\treturn _transformCharacter(res.data.results[0]);\n\t};\n\n\tconst getCharacterByName = async (name) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}characters?name=${name}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\tconst getAllComics = async (offset = _baseCharOffset) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformComic);\n\t};\n\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComic(res.data.results[0]);\n\t};\n\n\tconst _transformCharacter = (char, fullDescr = 150) => {\n\t\tconst comicsItems = (arr, length) => {\n\t\t\tif (arr.length) return arr.splice(0, length);\n\t\t\telse return [{ name: 'This character does not have comics' }];\n\t\t};\n\n\t\treturn {\n\t\t\tid: char.id,\n\t\t\tthumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\n\t\t\tname: char.name,\n\t\t\tdescription: char.description\n\t\t\t\t? fullDescr\n\t\t\t\t\t? char.description\n\t\t\t\t\t: char.description.slice(0, 220)\n\t\t\t\t: 'There is no description for this character',\n\t\t\thomepage: char.urls[0].url,\n\t\t\twiki: char.urls[1].url,\n\t\t\tcomicsItems: comicsItems(char.comics.items, 10),\n\t\t};\n\t};\n\n\tconst _transformComic = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\tthumbnail: `${comics.thumbnail.path}.${comics.thumbnail.extension}`,\n\t\t\ttitle: comics.title,\n\t\t\tdescription:\n\t\t\t\tcomics.description || 'There is no description for this comic',\n\t\t\tprice: comics.prices[0].price + '$',\n\t\t\tlanguage: comics.textObjects.language || 'en-us',\n\t\t\tpages: comics.pageCount\n\t\t\t\t? `${comics.pageCount} pages`\n\t\t\t\t: 'No information about the number of pages',\n\t\t};\n\t};\n\n\treturn {\n\t\tloading,\n\t\terror,\n\t\tgetAllCharacters,\n\t\tgetCharacter,\n\t\tgetAllComics,\n\t\tgetComic,\n\t\tclearError,\n\t\tgetCharacterByName,\n\t};\n};\n","import { useState, useCallback } from 'react';\n\nexport const useHttp = () => {\n\tconst [error, setError] = useState(false);\n\tconst [loading, setLoading] = useState(false);\n\n\tconst request = useCallback(\n\t\tasync (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\n\t\t\ttry {\n\t\t\t\tsetLoading(true);\n\t\t\t\tconst response = await fetch(url, { method, body, headers });\n\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tthrow new Error(`Could not fetch ${url}, status ${response.status}`);\n\t\t\t\t}\n\n\t\t\t\tconst data = await response.json();\n\n\t\t\t\tsetLoading(false);\n\n\t\t\t\treturn data;\n\t\t\t} catch (e) {\n\t\t\t\tsetLoading(false);\n\t\t\t\tsetError(e.message);\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\t[]\n\t);\n\tconst clearError = useCallback(() => setError(null), []);\n\n\treturn { loading, error, request, clearError };\n};\n"],"names":["ErrorBoundary","state","error","errorMessage","console","log","this","setState","props","children","Component","style","display","margin","width","height","objectFit","src","alt","RandomCharBlock","char","thumbnail","name","description","homepage","wiki","imgSytle","className","href","useState","setChar","useMarvelServices","loading","getCharacter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","View","comicsItems","imgNotAvailabe","match","map","item","i","comicId","resourceURI","disabled","pointerEvents","to","charId","skeleton","arr","onCharSelected","focusRefs","useRef","onItemFocus","forEach","classList","remove","add","focus","items","CSSTransition","timeout","classNames","tabIndex","ref","e","current","onKeyDown","key","TransitionGroup","component","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charsEnded","setCharsEnded","getAllCharacters","onRequest","initial","res","onCharListLoaded","newCharList","ended","length","getCharacterByName","results","initialValues","charName","validationSchema","Yup","required","onSubmit","values","htmlFor","type","placeholder","selectedChar","setSelectedChar","decoration","_apiBase","_apiKey","_baseCharOffset","setError","setLoading","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_transformCharacter","getAllComics","_transformComic","getComic","fullDescr","splice","path","extension","slice","urls","comics","title","price","prices","language","textObjects","pages","pageCount"],"sourceRoot":""}